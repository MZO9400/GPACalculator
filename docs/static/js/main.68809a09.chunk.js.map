{"version":3,"sources":["index.js"],"names":["GPACalculator","props","count","state","Semesters","Name","Grade","CreditHours","insertNewSubject","bind","handleGradeChange","handleNameChange","handleCHChange","addSemester","e","index","parseInt","target","id","isNaN","col","getAttribute","value","this","setState","key","Control","onChange","placeholder","as","defaultValue","type","min","max","sems","i","push","className","onClick","map","val","returnSubjectJSON","disabled","calculateGPA","event","forceUpdate","getSems","CGPA","length","parseFloat","gradePoint","creditHourCount","toFixed","Sems","alert","calculateCGPA","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.68809a09.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./custom.css\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nclass GPACalculator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { Semesters: [[{ Name: \"\", Grade: 0, CreditHours: 0 }]] };\r\n    this.insertNewSubject = this.insertNewSubject.bind(this);\r\n    this.handleGradeChange = this.handleGradeChange.bind(this);\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n    this.handleCHChange = this.handleCHChange.bind(this);\r\n    this.addSemester = this.addSemester.bind(this);\r\n  }\r\n  count = 0;\r\n  handleCHChange(e) {\r\n    let index = parseInt(e.target.id);\r\n    if (isNaN(index)) {\r\n      index = 0;\r\n    }\r\n    let col = parseInt(e.target.getAttribute(\"col\"));\r\n    if (isNaN(col)) {\r\n      col = 0;\r\n    }\r\n    let value = e.target.value;\r\n    this.setState(state => (state.Semesters[col][index].CreditHours = value));\r\n  }\r\n  handleGradeChange(e) {\r\n    let index = parseInt(e.target.id);\r\n    if (isNaN(index)) {\r\n      index = 0;\r\n    }\r\n    let col = parseInt(e.target.getAttribute(\"col\"));\r\n    if (isNaN(col)) {\r\n      col = 0;\r\n    }\r\n    let value = e.target.value;\r\n    this.setState(state => (state.Semesters[col][index].Grade = value));\r\n  }\r\n  handleNameChange(e) {\r\n    let index = parseInt(e.target.id);\r\n    if (isNaN(index)) {\r\n      index = 0;\r\n    }\r\n    let col = parseInt(e.target.getAttribute(\"col\"));\r\n    if (isNaN(col)) {\r\n      col = 0;\r\n    }\r\n    let value = e.target.value;\r\n    this.setState(state => (state.Semesters[col][index].Name = value));\r\n  }\r\n  returnSubjectJSON(value, col) {\r\n    return (\r\n      <Form key={value}>\r\n        <Form.Control\r\n          onChange={this.handleNameChange}\r\n          placeholder=\"Enter Subject Name\"\r\n          id={value}\r\n          col={col}\r\n          value={this.state.value}\r\n        ></Form.Control>\r\n        <Form.Control\r\n          as=\"select\"\r\n          onChange={this.handleGradeChange}\r\n          id={value}\r\n          col={col}\r\n          defaultValue=\"0\"\r\n        >\r\n          <option value=\"4\">A</option>\r\n          <option value=\"3.67\">A-</option>\r\n          <option value=\"3.33\">B+</option>\r\n          <option value=\"3\">B</option>\r\n          <option value=\"2.67\">B-</option>\r\n          <option value=\"2.33\">C+</option>\r\n          <option value=\"2\">C</option>\r\n          <option value=\"1.67\">C-</option>\r\n          <option value=\"1.33\">D+</option>\r\n          <option value=\"1\">D</option>\r\n          <option value=\"0\">F</option>\r\n        </Form.Control>\r\n        <Form.Control\r\n          onChange={this.handleCHChange}\r\n          placeholder=\"Enter Credit Hours\"\r\n          type=\"number\"\r\n          min=\"0\"\r\n          max=\"5\"\r\n          id={value}\r\n          col={col}\r\n        ></Form.Control>\r\n      </Form>\r\n    );\r\n  }\r\n  getSems() {\r\n    let sems = [];\r\n    for (let i = 0; i <= this.count; i++) {\r\n      sems.push(\r\n        <div className=\"innerdiv\" key={i}>\r\n          <Button onClick={this.insertNewSubject} id={i}>\r\n            Add Subject\r\n          </Button>\r\n          <br />\r\n          {this.state.Semesters[i].map((val, index = 0) =>\r\n            this.returnSubjectJSON(index, i)\r\n          )}\r\n          <Button disabled>{this.calculateGPA(i)}</Button>\r\n        </div>\r\n      );\r\n    }\r\n    return sems;\r\n  }\r\n  addSemester(event) {\r\n    let Sems = this.state.Semesters;\r\n    Sems.push([]);\r\n    this.count++;\r\n    this.forceUpdate();\r\n    return this.getSems();\r\n  }\r\n  calculateCGPA() {\r\n    let CGPA = 0;\r\n    for (let i = 0; i < this.state.Semesters.length; i++) {\r\n      CGPA += parseFloat(this.calculateGPA(i));\r\n    }\r\n    return CGPA / this.state.Semesters.length;\r\n  }\r\n  calculateGPA(col) {\r\n    let gradePoint = 0;\r\n    let creditHourCount = 0;\r\n    for (let i = 0; i < this.state.Semesters[col].length; i++) {\r\n      gradePoint +=\r\n        parseInt(this.state.Semesters[col][i].CreditHours) *\r\n        parseFloat(this.state.Semesters[col][i].Grade);\r\n      creditHourCount += parseInt(this.state.Semesters[col][i].CreditHours);\r\n    }\r\n    return isNaN(gradePoint / creditHourCount)\r\n      ? 0\r\n      : (gradePoint / creditHourCount).toFixed(2);\r\n  }\r\n  insertNewSubject(event) {\r\n    let id = parseInt(event.target.id);\r\n    let Sems = this.state.Semesters;\r\n    if (\r\n      Sems[id][Sems[id].length - 1] &&\r\n      (Sems[id][Sems[id].length - 1].Name.length === 0 ||\r\n        Sems[id][Sems[id].length - 1].CreditHours <= 0 ||\r\n        Sems[id][Sems[id].length - 1].CreditHours > 5)\r\n    ) {\r\n      alert(\"Please fill the previous data before proceeding\");\r\n      return;\r\n    }\r\n    Sems[id].push({ Name: \"\", Grade: 0, CreditHours: 0 });\r\n    this.setState({\r\n      Semesters: Sems\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div id=\"maindiv\">\r\n        <Button id=\"NewSemester\" onClick={this.addSemester}>\r\n          +\r\n        </Button>\r\n        <div className=\"semesters\">{this.getSems()}</div>\r\n        <Button id=\"GPA\" disabled>\r\n          {this.calculateCGPA()}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nReactDOM.render(<GPACalculator />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}