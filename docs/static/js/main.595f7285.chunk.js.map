{"version":3,"sources":["index.js"],"names":["GPACalculator","props","count","state","Semesters","Name","Grade","CreditHours","insertNewSubject","bind","handleGradeChange","handleNameChange","handleCHChange","addSemester","event","index","parseInt","target","id","isNaN","col","getAttribute","value","this","setState","key","class","Control","onChange","placeholder","as","defaultValue","type","min","max","sems","i","GPA","calculateGPA","color","push","className","onClick","map","val","returnSubjectJSON","disabled","forceUpdate","getSems","CGPA","length","parseFloat","gradePoint","creditHourCount","toFixed","Sems","alert","calculateCGPA","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.595f7285.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./custom.css\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nclass GPACalculator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { Semesters: [[{ Name: \"\", Grade: 0, CreditHours: 0 }]] };\r\n    this.insertNewSubject = this.insertNewSubject.bind(this);\r\n    this.handleGradeChange = this.handleGradeChange.bind(this);\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n    this.handleCHChange = this.handleCHChange.bind(this);\r\n    this.addSemester = this.addSemester.bind(this);\r\n  }\r\n  count = 0;\r\n  handleCHChange(event) {\r\n    let index = parseInt(event.target.id);\r\n    if (isNaN(index)) {\r\n      index = 0;\r\n    }\r\n    let col = parseInt(event.target.getAttribute(\"col\"));\r\n    if (isNaN(col)) {\r\n      col = 0;\r\n    }\r\n    let value = event.target.value;\r\n    this.setState(state => (state.Semesters[col][index].CreditHours = value));\r\n  }\r\n  handleGradeChange(event) {\r\n    let index = parseInt(event.target.id);\r\n    if (isNaN(index)) {\r\n      index = 0;\r\n    }\r\n    let col = parseInt(event.target.getAttribute(\"col\"));\r\n    if (isNaN(col)) {\r\n      col = 0;\r\n    }\r\n    let value = event.target.value;\r\n    this.setState(state => (state.Semesters[col][index].Grade = value));\r\n  }\r\n  handleNameChange(event) {\r\n    let index = parseInt(event.target.id);\r\n    if (isNaN(index)) {\r\n      index = 0;\r\n    }\r\n    let col = parseInt(event.target.getAttribute(\"col\"));\r\n    if (isNaN(col)) {\r\n      col = 0;\r\n    }\r\n    let value = event.target.value;\r\n    this.setState(state => (state.Semesters[col][index].Name = value));\r\n  }\r\n  returnSubjectJSON(value, col) {\r\n    return (\r\n      <Form key={value} class=\"subject\">\r\n        <Form.Control\r\n          onChange={this.handleNameChange}\r\n          placeholder=\"Enter Subject Name\"\r\n          id={value}\r\n          col={col}\r\n          value={this.state.value}\r\n        ></Form.Control>\r\n        <Form.Control\r\n          as=\"select\"\r\n          onChange={this.handleGradeChange}\r\n          id={value}\r\n          col={col}\r\n          defaultValue=\"0\"\r\n        >\r\n          <option value=\"4\">A</option>\r\n          <option value=\"3.67\">A-</option>\r\n          <option value=\"3.33\">B+</option>\r\n          <option value=\"3\">B</option>\r\n          <option value=\"2.67\">B-</option>\r\n          <option value=\"2.33\">C+</option>\r\n          <option value=\"2\">C</option>\r\n          <option value=\"1.67\">C-</option>\r\n          <option value=\"1.33\">D+</option>\r\n          <option value=\"1\">D</option>\r\n          <option value=\"0\">F</option>\r\n        </Form.Control>\r\n        <Form.Control\r\n          onChange={this.handleCHChange}\r\n          placeholder=\"Enter Credit Hours\"\r\n          type=\"number\"\r\n          min=\"0\"\r\n          max=\"5\"\r\n          id={value}\r\n          col={col}\r\n        ></Form.Control>\r\n      </Form>\r\n    );\r\n  }\r\n  getSems() {\r\n    let sems = [];\r\n    for (let i = 0; i <= this.count; i++) {\r\n      let GPA = this.calculateGPA(i);\r\n      let color = \"\";\r\n      if (GPA > 3.1) {\r\n        color = \"btn btn-success\";\r\n      } else if (GPA > 2.1) {\r\n        color = \"btn btn-info\";\r\n      } else if (GPA > 1.1) {\r\n        color = \"btn btn-warning\";\r\n      } else {\r\n        color = \"btn btn-danger\";\r\n      }\r\n      sems.push(\r\n        <div className=\"innerdiv\" key={i}>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-success\"\r\n            onClick={this.insertNewSubject}\r\n            id={i}\r\n          >\r\n            Add Subject\r\n          </button>\r\n          <br />\r\n          {this.state.Semesters[i].map((val, index = 0) =>\r\n            this.returnSubjectJSON(index, i)\r\n          )}\r\n          <button type=\"button\" class={color} disabled>\r\n            {GPA}\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n    return sems;\r\n  }\r\n  addSemester(event) {\r\n    let Sems = this.state.Semesters;\r\n    Sems.push([]);\r\n    this.count++;\r\n    this.forceUpdate();\r\n    return this.getSems();\r\n  }\r\n  calculateCGPA() {\r\n    let CGPA = 0;\r\n    for (let i = 0; i < this.state.Semesters.length; i++) {\r\n      CGPA += parseFloat(this.calculateGPA(i));\r\n    }\r\n    return CGPA / this.state.Semesters.length;\r\n  }\r\n  calculateGPA(col) {\r\n    let gradePoint = 0;\r\n    let creditHourCount = 0;\r\n    for (let i = 0; i < this.state.Semesters[col].length; i++) {\r\n      gradePoint +=\r\n        parseInt(this.state.Semesters[col][i].CreditHours) *\r\n        parseFloat(this.state.Semesters[col][i].Grade);\r\n      creditHourCount += parseInt(this.state.Semesters[col][i].CreditHours);\r\n    }\r\n    return isNaN(gradePoint / creditHourCount)\r\n      ? 0\r\n      : (gradePoint / creditHourCount).toFixed(2);\r\n  }\r\n  insertNewSubject(event) {\r\n    let id = parseInt(event.target.id);\r\n    let Sems = this.state.Semesters;\r\n    if (\r\n      Sems[id][Sems[id].length - 1] &&\r\n      (Sems[id][Sems[id].length - 1].Name.length === 0 ||\r\n        Sems[id][Sems[id].length - 1].CreditHours <= 0 ||\r\n        Sems[id][Sems[id].length - 1].CreditHours > 5)\r\n    ) {\r\n      alert(\"Please fill the previous data before proceeding\");\r\n      return;\r\n    }\r\n    Sems[id].push({ Name: \"\", Grade: 0, CreditHours: 0 });\r\n    this.setState({\r\n      Semesters: Sems\r\n    });\r\n  }\r\n  render() {\r\n    let CGPA = this.calculateCGPA();\r\n    let color = \"\";\r\n    if (CGPA > 3.1) {\r\n      color = \"btn btn-success\";\r\n    } else if (CGPA > 2.1) {\r\n      color = \"btn btn-info\";\r\n    } else if (CGPA > 1.1) {\r\n      color = \"btn btn-warning\";\r\n    } else {\r\n      color = \"btn btn-danger\";\r\n    }\r\n    return (\r\n      <div id=\"maindiv\">\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-info\"\r\n          id=\"NewSemester\"\r\n          onClick={this.addSemester}\r\n        >\r\n          +\r\n        </button>\r\n        <div className=\"semesters\">{this.getSems()}</div>\r\n        <button type=\"button\" class={color} id=\"GPA\" disabled>\r\n          {CGPA.toFixed(2)}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nReactDOM.render(<GPACalculator />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}